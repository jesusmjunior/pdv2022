import streamlit as st
import pandas as pd
import hashlib
from datetime import datetime
import io
from PIL import Image
import base64
import numpy as np
import cv2
from pyzbar.pyzbar import decode  # Biblioteca para leitura de c√≥digos de barras

# Configura√ß√£o inicial
st.set_page_config(page_title="ORION PDV", layout="wide", initial_sidebar_state="collapsed")

# URLs dos dados externos
URL_GRUPO = "https://docs.google.com/spreadsheets/d/e/2PACX-1vS0r3XE4DpzlYJjZwjc2c_pW_K3euooN9caPedtSq-nH_aEPnvx1jrcd9t0Yhg8fqXfR3j5jM2OyUQQ/pub?gid=528868130&single=true&output=csv"
URL_MARCAS = "https://docs.google.com/spreadsheets/d/e/2PACX-1vS0r3XE4DpzlYJjZwjc2c_pW_K3euooN9caPedtSq-nH_aEPnvx1jrcd9t0Yhg8fqXfR3j5jM2OyUQQ/pub?gid=832596780&single=true&output=csv"
URL_CLIENTE = "https://docs.google.com/spreadsheets/d/e/2PACX-1vS0r3XE4DpzlYJjZwjc2c_pW_K3euooN9caPedtSq-nH_aEPnvx1jrcd9t0Yhg8fqXfR3j5jM2OyUQQ/pub?gid=1645177762&single=true&output=csv"
URL_PRODUTO = "https://docs.google.com/spreadsheets/d/e/2PACX-1vS0r3XE4DpzlYJjZwjc2c_pW_K3euooN9caPedtSq-nH_aEPnvx1jrcd9t0Yhg8fqXfR3j5jM2OyUQQ/pub?gid=1506891785&single=true&output=csv"
URL_PGTO = "https://docs.google.com/spreadsheets/d/e/2PACX-1vS0r3XE4DpzlYJjZwjc2c_pW_K3euooN9caPedtSq-nH_aEPnvx1jrcd9t0Yhg8fqXfR3j5jM2OyUQQ/pub?gid=1061064660&single=true&output=csv"
URL_VENDA = "https://docs.google.com/spreadsheets/d/e/2PACX-1vS0r3XE4DpzlYJjZwjc2c_pW_K3euooN9caPedtSq-nH_aEPnvx1jrcd9t0Yhg8fqXfR3j5jM2OyUQQ/pub?gid=1817416820&single=true&output=csv"

# Banco de dados simulado de produtos
if 'produtos_db' not in st.session_state:
    st.session_state.produtos_db = {
        '7891000315507': {
            'nome': 'Leite Integral',
            'codigo_barras': '7891000315507',
            'grupo': 'Latic√≠nios',
            'marca': 'Ninho',
            'preco': 5.99,
            'estoque': 50,
            'foto': "https://www.nestleprofessional.com.br/sites/default/files/styles/np_product_detail/public/2022-09/leite-em-po-ninho-integral-lata-400g.png"
        },
        '7891910000197': {
            'nome': 'Arroz',
            'codigo_barras': '7891910000197',
            'grupo': 'Gr√£os',
            'marca': 'Tio Jo√£o',
            'preco': 22.90,
            'estoque': 35,
            'foto': "https://m.media-amazon.com/images/I/61l6ojQQtDL._AC_UF894,1000_QL80_.jpg"
        },
        '7891149410116': {
            'nome': 'Caf√©',
            'codigo_barras': '7891149410116',
            'grupo': 'Bebidas',
            'marca': 'Pil√£o',
            'preco': 15.75,
            'estoque': 28,
            'foto': "https://m.media-amazon.com/images/I/51xq5MnKz4L._AC_UF894,1000_QL80_.jpg"
        }
    }

# Vari√°vel para armazenar o √∫ltimo c√≥digo de barras
if 'ultimo_codigo' not in st.session_state:
    st.session_state.ultimo_codigo = None

# Fun√ß√£o para ler c√≥digo de barras da imagem
def ler_codigo_barras_imagem(imagem):
    try:
        # Converter imagem PIL para formato opencv
        img_cv = np.array(imagem)
        
        # Converter para escala de cinza (melhora a detec√ß√£o)
        gray = cv2.cvtColor(img_cv, cv2.COLOR_RGB2GRAY)
        
        # Aplicar suaviza√ß√£o para melhorar a leitura
        blur = cv2.GaussianBlur(gray, (5, 5), 0)
        
        # Melhorar contraste
        _, thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        
        # Tentar decodificar
        decoded_objects = decode(thresh)
        
        # Se n√£o encontrou, tentar na imagem original
        if not decoded_objects:
            decoded_objects = decode(img_cv)
            
        # Verificar se algum c√≥digo foi encontrado
        if decoded_objects:
            for obj in decoded_objects:
                # Extrair dados
                codigo = obj.data.decode('utf-8')
                # Verificar se √© um c√≥digo de barras num√©rico (EAN/UPC)
                if codigo.isdigit():
                    return codigo
                    
            # Se encontrou c√≥digos mas nenhum √© num√©rico
            return None
        else:
            return None
            
    except Exception as e:
        st.error(f"Erro ao processar imagem: {e}")
        return None

# Fun√ß√£o de autentica√ß√£o
def autenticar_usuario():
    # Dados de autentica√ß√£o
    USUARIOS = {
        "admjesus": {
            "nome": "ADM Jesus",
            "senha_hash": hashlib.sha256("senha123".encode()).hexdigest()
        }
    }
    
    st.title("üîê Login - ORION PDV")
    usuario = st.text_input("Usu√°rio")
    senha = st.text_input("Senha", type="password")
    if st.button("Entrar"):
        if usuario in USUARIOS:
            hash_inserida = hashlib.sha256(senha.encode()).hexdigest()
            if hash_inserida == USUARIOS[usuario]["senha_hash"]:
                st.session_state["autenticado"] = True
                st.session_state["usuario"] = usuario
                st.success("Login realizado com sucesso!")
                st.rerun()
            else:
                st.error("Senha incorreta.")
        else:
            st.error("Usu√°rio n√£o encontrado.")

# Fun√ß√£o para scanner de c√≥digo de barras aprimorado
def leitor_codigo_barras():
    st.subheader("üì∑ Scanner de C√≥digo de Barras")
    
    # Componente JavaScript para leitura de c√≥digo de barras
    barcode_scanner_html = """
    <div style="padding: 20px; border: 1px solid #ccc; border-radius: 5px; margin-bottom: 20px;">
        <h4 style="color: #0066cc;">Scanner via c√¢mera do dispositivo</h4>
        <p>Para escanear um c√≥digo de barras:</p>
        <ol>
            <li>Use o bot√£o abaixo para fazer upload da imagem do c√≥digo de barras</li>
            <li>O sistema processar√° automaticamente a imagem e extrair√° o c√≥digo</li>
            <li>Ou digite manualmente o c√≥digo no campo de texto</li>
        </ol>
        <p style="color: #666; font-style: italic;">Dica: Em dispositivos Android, voc√™ pode usar o Google Lens ou o aplicativo de c√¢mera para ler c√≥digos de barras.</p>
    </div>
    """
    st.markdown(barcode_scanner_html, unsafe_allow_html=True)
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # Capturar foto para processamento
        uploaded_file = st.file_uploader("üì∏ Upload da foto do c√≥digo de barras", 
                                       type=["jpg", "png", "jpeg"])
        
        # Manual input
        codigo_barras = st.text_input("Digite o c√≥digo de barras:", 
                                    value=st.session_state.ultimo_codigo if st.session_state.ultimo_codigo else "",
                                    placeholder="Ex: 7891000315507")
    
    # C√≥digo extra√≠do da imagem
    codigo_na_imagem = None
    
    with col2:
        if uploaded_file is not None:
            try:
                # Exibir a imagem carregada
                image = Image.open(uploaded_file)
                st.image(image, caption="Imagem carregada", width=150)
                
                # Processar a imagem para extrair o c√≥digo de barras
                codigo_na_imagem = ler_codigo_barras_imagem(image)
                
                if codigo_na_imagem:
                    st.success(f"C√≥digo detectado: {codigo_na_imagem}")
                    # Atualizar o campo de entrada com o c√≥digo detectado
                    codigo_barras = codigo_na_imagem
                    st.session_state.ultimo_codigo = codigo_na_imagem
                else:
                    st.warning("Nenhum c√≥digo de barras detectado na imagem. Digite manualmente.")
            except Exception as e:
                st.error(f"Erro ao processar imagem: {e}")
    
    # Bot√£o para usar o c√≥digo (seja digitado ou detectado na imagem)
    codigo_a_usar = codigo_na_imagem if codigo_na_imagem else codigo_barras
    
    if st.button("Usar C√≥digo", type="primary") and codigo_a_usar:
        st.session_state.ultimo_codigo = codigo_a_usar
        st.success(f"C√≥digo registrado: {codigo_a_usar}")
        
        # Verificar se o c√≥digo existe no banco de dados
        if codigo_a_usar in st.session_state.produtos_db:
            produto = st.session_state.produtos_db[codigo_a_usar]
            st.success(f"Produto encontrado: {produto['nome']}")
            
            # Exibir informa√ß√µes do produto
            col1, col2 = st.columns([1, 2])
            with col1:
                if produto['foto']:
                    st.image(produto['foto'], width=150)
            with col2:
                st.subheader(produto['nome'])
                st.write(f"**Pre√ßo:** R$ {produto['preco']:.2f}")
                st.write(f"**Estoque:** {produto['estoque']} unidades")
        else:
            st.warning(f"C√≥digo {codigo_a_usar} n√£o encontrado no cadastro.")
    
    return st.session_state.ultimo_codigo

# Fun√ß√£o para integra√ß√£o alternativa com aplicativos de scanner
def mostrar_instrucoes_scanner():
    st.markdown("""
    ### üì± Integra√ß√£o com aplicativos de scanner
    
    Para escanear c√≥digos de barras, voc√™ pode usar:
    
    1. **Google Lens** - Aponte para o c√≥digo e copie o n√∫mero
    2. **Aplicativo C√¢mera** - Muitos celulares j√° detectam c√≥digos automaticamente
    3. **Qualquer app de scanner de QR/c√≥digos de barras**
    
    Depois de obter o c√≥digo, tire uma foto e fa√ßa upload ou digite-o manualmente no campo acima.
    """)
    
    # Adicionando QR Code para abrir esta aplica√ß√£o no celular
    # (substituir pelo seu URL real quando deployed)
    app_url = "https://pdvoliveira.streamlit.app" 
    st.markdown(f"""
    <div style="text-align: center; margin: 20px 0;">
        <p>Escaneie este QR Code para abrir o aplicativo no seu celular:</p>
        <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data={app_url}" width="150">
    </div>
    """, unsafe_allow_html=True)

# Fun√ß√£o de cadastro de produto com suporte a c√≥digo de barras e foto
def render_cadastro_produto():
    st.title("üì¶ Cadastro de Produto")

    try:
        grupo_df = pd.read_csv(URL_GRUPO)
        marcas_df = pd.read_csv(URL_MARCAS)
    except Exception as e:
        st.error(f"Erro ao carregar dados de grupo/marcas: {e}")
        return

    # Aba para adicionar produto via c√≥digo de barras
    tab1, tab2 = st.tabs(["Adicionar Produto", "Consultar por C√≥digo de Barras"])
    
    with tab1:
        with st.form("form_cad_produto"):
            codigo_barras = st.text_input("C√≥digo de Barras", 
                                        value=st.session_state.ultimo_codigo if st.session_state.ultimo_codigo else "",
                                        placeholder="Ex: 7891000315507")
            
            # Bot√£o para ler c√≥digo de barras
            scan_barcode = st.form_submit_button("üì∑ Ler C√≥digo de Barras", type="secondary")
            if scan_barcode:
                st.info("Clique fora do formul√°rio e use a op√ß√£o 'Scanner de C√≥digo de Barras' abaixo")
                
            nome = st.text_input("Nome do Produto")
            
            col1, col2 = st.columns(2)
            with col1:
                grupo = st.selectbox("Grupo", grupo_df["DESCRICAO"].dropna())
            with col2:
                marca = st.selectbox("Marca", marcas_df["DESCRICAO"].dropna())
                
            col1, col2 = st.columns(2)
            with col1:
                preco = st.number_input("Pre√ßo", min_value=0.0, step=0.01, format="%.2f")
            with col2:
                estoque = st.number_input("Estoque", min_value=0)
            
            foto_url = st.text_input("URL da Foto do Produto", 
                                   placeholder="https://exemplo.com/imagem.jpg")
            
            # Exibir pr√©via da imagem se URL for fornecida
            if foto_url:
                st.image(foto_url, caption="Pr√©via da imagem", width=200)
                
            enviar = st.form_submit_button("Salvar Produto")
            
            if enviar and codigo_barras and nome:
                novo_produto = {
                    'nome': nome,
                    'codigo_barras': codigo_barras,
                    'grupo': grupo,
                    'marca': marca,
                    'preco': preco,
                    'estoque': estoque,
                    'foto': foto_url
                }
                
                # Salvar no "banco de dados" local (session_state)
                st.session_state.produtos_db[codigo_barras] = novo_produto
                st.success(f"Produto '{nome}' cadastrado com sucesso!")
                st.json(novo_produto)
    
    with tab2:
        # Scanner de c√≥digo de barras fora do formul√°rio
        codigo_scaneado = leitor_codigo_barras()
        
        # Instru√ß√µes para uso com aplicativos externos
        with st.expander("Como escanear c√≥digos com seu celular", expanded=False):
            mostrar_instrucoes_scanner()
            
        # Exibir todos os produtos cadastrados
        st.subheader("Produtos Cadastrados")
        
        # Criar dataframe para visualiza√ß√£o
        produtos_list = []
        for codigo, produto in st.session_state.produtos_db.items():
            produtos_list.append({
                "C√≥digo": codigo,
                "Produto": produto['nome'],
                "Pre√ßo": f"R$ {produto['preco']:.2f}",
                "Estoque": produto['estoque']
            })
        
        if produtos_list:
            produtos_df = pd.DataFrame(produtos_list)
            st.dataframe(produtos_df, use_container_width=True)
        else:
            st.info("Nenhum produto cadastrado.")

# Fun√ß√£o de cadastro de cliente
def render_cadastro_cliente():
    st.title("üë§ Cadastro de Cliente")
    
    with st.form("form_cad_cliente"):
        nome = st.text_input("Nome do Cliente")
        documento = st.text_input("CPF/CNPJ")
        email = st.text_input("Email")
        telefone = st.text_input("Telefone")
        
        col1, col2 = st.columns(2)
        with col1:
            endereco = st.text_input("Endere√ßo")
        with col2:
            cidade = st.text_input("Cidade")
            
        enviar = st.form_submit_button("Salvar Cliente")
        
        if enviar:
            st.success("Cliente cadastrado com sucesso!")
            st.json({
                "nome": nome,
                "documento": documento,
                "email": email,
                "telefone": telefone,
                "endereco": endereco,
                "cidade": cidade
            })

# Fun√ß√£o de registro de venda com leitor de c√≥digo de barras automatizado
def render_registro_venda():
    st.title("üßæ Registrar Venda")

    try:
        cliente_df = pd.read_csv(URL_CLIENTE)
        forma_pgto_df = pd.read_csv(URL_PGTO)
    except Exception as e:
        st.error(f"Erro ao carregar dados de venda: {e}")
        return
    
    # Inicializar carrinho de compras na sess√£o se n√£o existir
    if 'carrinho' not in st.session_state:
        st.session_state.carrinho = []
    
    # √Årea de leitura de c√≥digo de barras
    st.subheader("Adicionar Produto por C√≥digo de Barras")
    
    col1, col2 = st.columns([3, 1])
    
    # C√≥digo lido da imagem
    codigo_detectado = None
    
    with col1:
        # Input manual
        codigo_manual = st.text_input("Digite o c√≥digo de barras:", 
                                     placeholder="Ex: 7891000315507",
                                     value=st.session_state.ultimo_codigo if st.session_state.ultimo_codigo else "")
        
        # Upload de imagem com processamento autom√°tico
        uploaded_file = st.file_uploader("üì∏ Upload da foto do c√≥digo de barras", 
                                       type=["jpg", "png", "jpeg"])
        
        if uploaded_file is not None:
            try:
                image = Image.open(uploaded_file)
                st.image(image, caption="Imagem carregada", width=150)
                
                # Processar a imagem automaticamente
                codigo_detectado = ler_codigo_barras_imagem(image)
                
                if codigo_detectado:
                    st.success(f"C√≥digo detectado: {codigo_detectado}")
                    # Atualizar campo de entrada e vari√°vel de sess√£o
                    codigo_manual = codigo_detectado
                    st.session_state.ultimo_codigo = codigo_detectado
                else:
                    st.warning("Nenhum c√≥digo de barras detectado. Digite manualmente.")
            except Exception as e:
                st.error(f"Erro ao processar imagem: {e}")
            
    with col2:
        qtd = st.number_input("Quantidade", min_value=1, value=1, step=1)
    
    # Link para instru√ß√µes de scanner
    with st.expander("Como escanear c√≥digos com seu celular", expanded=False):
        mostrar_instrucoes_scanner()
    
    # Usar o c√≥digo detectado na imagem ou o digitado manualmente
    codigo_para_usar = codigo_detectado if codigo_detectado else codigo_manual
    
    # Bot√£o para adicionar produto ao carrinho
    if st.button("Adicionar ao Carrinho", type="primary") and codigo_para_usar:
        if codigo_para_usar in st.session_state.produtos_db:
            produto = st.session_state.produtos_db[codigo_para_usar]
            
            # Verificar se o produto j√° est√° no carrinho
            encontrado = False
            for i, item in enumerate(st.session_state.carrinho):
                if item['codigo_barras'] == codigo_para_usar:
                    st.session_state.carrinho[i]['quantidade'] += qtd
                    st.session_state.carrinho[i]['total'] = st.session_state.carrinho[i]['quantidade'] * item['preco_unit']
                    encontrado = True
                    break
                    
            if not encontrado:
                # Adicionar novo item ao carrinho
                item = {
                    'codigo_barras': codigo_para_usar,
                    'produto': produto['nome'],
                    'quantidade': qtd,
                    'preco_unit': produto['preco'],
                    'total': qtd * produto['preco'],
                    'foto': produto['foto']
                }
                st.session_state.carrinho.append(item)
                
            st.success(f"Produto '{produto['nome']}' adicionado ao carrinho!")
            
            # Limpar c√≥digo ap√≥s adicionar ao carrinho
            st.session_state.ultimo_codigo = None
            st.rerun()
        else:
            st.error(f"C√≥digo de barras {codigo_para_usar} n√£o encontrado. Cadastre o produto primeiro.")
    
    # Exibir carrinho
    st.subheader("Carrinho de Compras")
    
    if not st.session_state.carrinho:
        st.info("Carrinho vazio. Adicione produtos escaneando os c√≥digos de barras.")
    else:
        # Exibir itens do carrinho
        for i, item in enumerate(st.session_state.carrinho):
            col1, col2, col3, col4 = st.columns([1, 3, 1, 1])
            
            with col1:
                if item['foto']:
                    st.image(item['foto'], width=80)
                
            with col2:
                st.write(f"**{item['produto']}**")
                st.write(f"C√≥digo: {item['codigo_barras']}")
                
            with col3:
                st.write(f"Qtd: {item['quantidade']}")
                st.write(f"R$ {item['preco_unit']:.2f}")
                
            with col4:
                st.write(f"**R$ {item['total']:.2f}**")
                if st.button("üóëÔ∏è", key=f"remove_{i}"):
                    st.session_state.carrinho.pop(i)
                    st.rerun()
            
            st.divider()
        
        # Total do carrinho
        total_carrinho = sum(item['total'] for item in st.session_state.carrinho)
        st.subheader(f"Total: R$ {total_carrinho:.2f}")
        
        # √Årea de finaliza√ß√£o
        st.subheader("Finalizar Venda")
        with st.form("form_finalizar"):
            cliente = st.selectbox("Cliente", cliente_df["NOME"].dropna())
            forma_pgto = st.selectbox("Forma de Pagamento", forma_pgto_df["DESCRICAO"].dropna())
            
            finalizar = st.form_submit_button("Finalizar Venda")
            
            if finalizar:
                venda = {
                    "cliente": cliente,
                    "forma_pgto": forma_pgto,
                    "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "total": total_carrinho,
                    "itens": st.session_state.carrinho
                }
                
                st.success("Venda registrada com sucesso!")
                st.json(venda)
                
                # Limpar carrinho ap√≥s finalizar
                st.session_state.carrinho = []
                st.rerun()
        
        # Bot√£o para limpar carrinho
        if st.button("Limpar Carrinho"):
            st.session_state.carrinho = []
            st.rerun()

# Fun√ß√£o de relat√≥rios
def render_relatorios():
    st.title("üìä Relat√≥rio de Vendas")

    try:
        venda_df = pd.read_csv(URL_VENDA)
        venda_df["DATA"] = pd.to_datetime(venda_df["DATA"], errors="coerce")
    except Exception as e:
        st.error(f"Erro ao carregar dados para relat√≥rio: {e}")
        return

    col1, col2 = st.columns(2)
    with col1:
        data_ini = st.date_input("Data Inicial", datetime.today())
    with col2:
        data_fim = st.date_input("Data Final", datetime.today())

    formas = venda_df["ID_FORMA_PGTO"].dropna().unique()
    forma_selecionada = st.selectbox("Filtrar por Forma de Pagamento (opcional)", ["Todas"] + list(formas))

    if st.button("Gerar Relat√≥rio"):
        try:
            filtro = (venda_df['DATA'].dt.date >= data_ini) & (venda_df['DATA'].dt.date <= data_fim)
            if forma_selecionada != "Todas":
                filtro &= (venda_df['ID_FORMA_PGTO'] == forma_selecionada)

            relatorio = venda_df[filtro].copy()

            if not relatorio.empty:
                st.success(f"Foram encontradas {len(relatorio)} vendas no per√≠odo.")
                st.dataframe(relatorio)
                total = relatorio['TOTAL'].sum()
                st.markdown(f"### üí∞ Total de Vendas no Per√≠odo: R$ {total:.2f}")

                csv = relatorio.to_csv(index=False).encode()
                st.download_button("üì• Baixar CSV", csv, "relatorio_vendas.csv", "text/csv")
            else:
                st.warning("Nenhuma venda encontrada para os filtros aplicados.")

        except Exception as err:
            st.error(f"Erro no processamento do relat√≥rio: {err}")

# Fun√ß√£o do painel financeiro
def render_painel():
    st.title("üìà Painel Financeiro")

    try:
        venda_df = pd.read_csv(URL_VENDA)
        venda_df["DATA"] = pd.to_datetime(venda_df["DATA"], errors="coerce")
    except Exception as e:
        st.error(f"Erro ao carregar dados para o painel: {e}")
        return

    # Vers√£o sem Plotly (usando gr√°ficos nativos do Streamlit)
    st.subheader("Total por Forma de Pagamento")
    pgto_group = venda_df.groupby("ID_FORMA_PGTO")["TOTAL"].sum().reset_index()
    st.bar_chart(pgto_group.set_index("ID_FORMA_PGTO"))
    
    st.subheader("Evolu√ß√£o Di√°ria de Vendas")
    diario = venda_df.groupby(venda_df["DATA"].dt.date)["TOTAL"].sum().reset_index()
    st.line_chart(diario.set_index("DATA"))
    
    total_vendas = venda_df['TOTAL'].sum()
    st.metric("Total Geral de Vendas", f"R$ {total_vendas:,.2f}")

# Fun√ß√£o principal que gerencia todo o fluxo do aplicativo
def main():
    if "autenticado" not in st.session_state:
        st.session_state["autenticado"] = False

    if not st.session_state["autenticado"]:
        autenticar_usuario()
        return

    st.sidebar.title("üîπ Menu PDV")
    if st.sidebar.button("Sair"):
        st.session_state["autenticado"] = False
        st.rerun()

    menu = st.sidebar.radio("Escolha a op√ß√£o:", [
        "Registrar Venda", "Cadastro Produto", "Cadastro Cliente", "Relat√≥rios", "Painel"])

    if menu == "Cadastro Produto":
        render_cadastro_produto()
    elif menu == "Cadastro Cliente":
        render_cadastro_cliente()
    elif menu == "Registrar Venda":
        render_registro_venda()
    elif menu == "Relat√≥rios":
        render_relatorios()
    elif menu == "Painel":
        render_painel()

# Execu√ß√£o principal
if __name__ == "__main__":
    main()
